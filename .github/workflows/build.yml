name: Build and Push K6 Runner Container

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: k6-runner

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: k6-runner:test
        cache-from: type=gha

    - name: Test container functionality
      run: |
        echo "Testing K6 Runner container..."
        
        # Test basic functionality
        docker run --rm k6-runner:test version
        docker run --rm k6-runner:test help
        
        # Test with a simple script
        mkdir -p test-scripts test-reports
        cat > test-scripts/smoke-test.js << 'EOF'
        import http from 'k6/http';
        import { check } from 'k6';
        
        export const options = {
          vus: 1,
          duration: '10s',
        };
        
        export default function () {
          const res = http.get('https://httpbin.org/get');
          check(res, {
            'status is 200': (r) => r.status === 200,
          });
        }
        EOF
        
        # Run smoke test
        docker run --rm \
          -v "$(pwd)/test-scripts:/scripts" \
          -v "$(pwd)/test-reports:/reports" \
          -e BASE_URL=https://httpbin.org \
          k6-runner:test run smoke-test.js
        
        # Verify reports were generated
        ls -la test-reports/
        
        echo "✅ Container tests passed!"

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write
    
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
        format: 'table'
        exit-code: '0'  # Don't fail on vulnerabilities, just report them
        
    - name: Run Trivy in JSON format for artifact
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
        format: 'json'
        output: 'trivy-results.json'
        exit-code: '0'
        
    - name: Upload Trivy scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-security-scan
        path: trivy-results.json
        retention-days: 30

    - name: Run Grype vulnerability scanner
      run: |
        # Install grype
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /tmp
        
        # Run grype scan
        /tmp/grype ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest -o json > grype-results.json || true
        
        # Display summary
        echo "=== Grype Scan Summary ==="
        /tmp/grype ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest -q || true

    - name: Upload Grype scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: grype-security-scan
        path: grype-results.json
        retention-days: 30
        if-no-files-found: warn
        
    - name: Display scan completion
      if: always()
      run: |
        echo "=== Vulnerability Scan Summary ==="
        echo "✅ Trivy scan completed. Results saved as artifact."
        if [ -f grype-results.json ]; then
          echo "✅ Grype scan completed. Results saved as artifact."
          echo "Grype results file size: $(ls -lh grype-results.json | awk '{print $5}')"
        else
          echo "⚠️ Grype scan results not found."
        fi
        if [ -f trivy-results.json ]; then
          echo "Trivy results file size: $(ls -lh trivy-results.json | awk '{print $5}')"
        fi